{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;\red87\green96\blue106;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c41569\c45098\c49020;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 README\
\
	      Xinyu Kang\
                 xkang@bu.edu\
                 December 2017\
\
\
\
This is the TGUH algorithm that implemented the tail greedy unbalanced haar transformation of networks.\
\
\
    \
        	Multiscale network analysis through tail-greedy bottom-up approximation, with applications in neuroscience (2017)\
	Xinyu Kang, Piotr Fryzlewicz, Catherine Chu, Mark Kramer, Eric Kolaczyk\
	Asilomar Conference on Signals, Systems, and Computers (2017)\
\
\
\
Applications =============================================================================\
\
- Part 1: 	Simulation study that generates Figure 1 in the paper\
\
- Part 2: 	An denoise example using the network TGUH.\
		We denoise the signal over a barbell of size 4+6.\
\
Functions \
=============================================================================\
\
TGUH_functions.r : contains  functions used by the algorithm.\
\
barbell			: simulate barbell network 
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 column.norm
\f2 			:
\f0  compute the l2 norm of a column vector \
diagSparse			: build a block diagonal matrix given block matrices\
est.noise			: estimate the standard deviation of iid Gaussian noise\
normalized.signal		: normalize a function to have unit standard deviation\
plotCompression		: generate figure1 in the paper\
one				
\f2 : generate matrix of ones\

\f0 row.norm			: compute the l2 norm of a row vector\
sym.by.avg			: make an asymmetric matrix a symmetric one\
tguhBarbell			: TGUH transformation of a noisy barbell network\
uh.bu.net.inv.sm		: inverse transform with smoothing\
denoise.th			: functions that denoise network signals\
uh.bu.net.nonrem		: greedy version of the TGUH\
uh.bu.net.nonrem.mult	: TgUH algorithm\
}